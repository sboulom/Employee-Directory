{"version":3,"sources":["components/container.js","components/row.js","components/col.js","components/search.js","components/table.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","children","Row","Col","size","Search","type","name","value","onChange","handleChange","Table","scope","ApiResults","length","map","person","index","key","src","picture","thumbnail","first","last","phone","email","axios","get","App","state","Original","event","target","setState","console","log","newResults","filter","toLowerCase","indexOf","API","then","res","data","results","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0PAEe,SAASA,EAAUC,GAC9B,OAAO,yBAAKC,UAAY,aACnBD,EAAME,UCFA,SAASC,EAAIH,GACxB,OAAO,yBAAKC,UAAY,OACpBD,EAAME,UCFC,SAASE,EAAIJ,GACxB,OAAO,yBAAKC,UAAa,UAAWD,EAAMK,MACrCL,EAAME,UCFA,SAASI,EAAQN,GAC5B,OAAQ,6BACJ,2BAAOO,KAAO,OAAOC,KAAM,SAAUC,MAAOT,EAAMM,OAASI,SAAWV,EAAMW,gBCFrE,SAASC,EAAOZ,GAC3B,OAAQ,2BAAOC,UAAU,SACzB,+BACE,4BACE,wBAAIY,MAAM,OAAV,KACA,wBAAIA,MAAM,OAAV,WACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAIJ,+BAEEb,EAAMc,WAAWC,OAAS,EAAIf,EAAMc,WAAWE,KAAI,SAACC,EAAQC,GAC3D,OACC,wBAAIC,IAAOD,GACX,wBAAIL,MAAM,SAASK,GACnB,gCAAK,yBAAKE,IAAOH,EAAOI,QAAQC,YAAhC,KACA,4BAAKL,EAAOT,KAAKe,OACjB,4BAAKN,EAAOT,KAAKgB,MACjB,4BAAKP,EAAOQ,OACZ,4BAAKR,EAAOS,WAGX,K,qBC1BM,EAEH,WACR,OAAOC,IAAMC,IAAI,kDCyDNC,E,4MA5CXC,MAAQ,CACJhB,WAAa,GACbiB,SAAW,GACXzB,OAAS,I,EAWhBK,aAAe,SAAAqB,GAAS,IAAD,EACGA,EAAMC,OAArBzB,EADY,EACZA,KAAMC,EADM,EACNA,MACd,EAAKyB,SAAL,eACK1B,EAAQC,IAEb0B,QAAQC,IAAI3B,GACZ,IAAI4B,EAAa,EAAKP,MAAMC,SAASO,QAAO,SAAArB,GACxC,OAAQA,EAAOT,KAAKe,MAAMgB,cAAcC,QAAQ/B,EAAM8B,gBAAiB,KAG3E,EAAKL,SAAS,CACVpB,WAAauB,K,kEApBG,IAAD,OACfI,EAAa,IAAIC,MAAK,SAAAC,GAClB,EAAKT,SAAS,CACVpB,WAAa6B,EAAIC,KAAKC,QACtBd,SAAWY,EAAIC,KAAKC,e,+BAqB/B,OACI,kBAAC9C,EAAD,KACG,kBAACI,EAAD,KACA,kBAACC,EAAD,CAAKC,KAAM,MACX,kBAACC,EAAD,CAASK,aAAgBmC,KAAKnC,aAAeL,OAAUwC,KAAKhB,MAAMxB,SACjE6B,QAAQC,IAAIU,KAAKhB,MAAMhB,YACxB,kBAACF,EAAD,CAAOE,WAAcgC,KAAKhB,MAAMhB,oB,GArC1BiC,aCLEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.52d722bd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Container(props){\r\n    return(<div className = \"container\">\r\n        {props.children}\r\n    </div>)\r\n}","import React from \"react\";\r\n\r\nexport default function Row(props){\r\n    return(<div className = \"row\">\r\n       {props.children}\r\n    </div>)\r\n}","import React from \"react\";\r\n\r\nexport default function Col(props){\r\n    return(<div className ={ \"col-sm-\"+ props.size }>\r\n        {props.children}\r\n    </div>)\r\n}","import React from \"react\";\r\n\r\nexport default function Search (props){\r\n    return (<div>\r\n        <input type = \"text\" name= \"Search\"  value={props.Search}  onChange ={props.handleChange} />\r\n    </div>)\r\n}","import React from \"react\";\r\n\r\nexport default function Table (props){\r\n    return (<table className=\"table\">\r\n    <thead>\r\n      <tr>\r\n        <th scope=\"col\">#</th>\r\n        <th scope=\"col\">Picture</th>\r\n        <th scope=\"col\" >First</th>\r\n        <th scope=\"col\">Last</th>\r\n        <th scope=\"col\">Phone</th>\r\n        <th scope=\"col\">Email</th>\r\n        \r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n\r\n     {props.ApiResults.length > 0 ? props.ApiResults.map((person, index) =>{\r\n       return(\r\n        <tr key = {index}>\r\n        <th scope=\"row\">{++index}</th>\r\n        <td> <img src = {person.picture.thumbnail}/> </td>\r\n        <td>{person.name.first}</td>\r\n        <td>{person.name.last}</td>\r\n        <td>{person.phone}</td>\r\n        <td>{person.email}</td>\r\n      </tr>\r\n       )\r\n     }): \"\"}\r\n\r\n\r\n   \r\n       \r\n    </tbody>\r\n  </table>)\r\n}","import axios from \"axios\";\r\n\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React , {Component} from \"react\";\r\nimport Container from \"./components/container\";\r\nimport Row from \"./components/row\";\r\nimport Col from \"./components/col\";\r\nimport Search from \"./components/search\";\r\nimport Table from \"./components/table\";\r\nimport API from \"./utils/API\";\r\n// obj={\r\n//     name:\"phil\",\r\n//     email:\"ploy3_@yaho.com\"\r\n// }\r\n// obj.name\r\n// obj.email\r\n// ---destruct---\r\n// const {name,email}=obj\r\n// name,\r\n// email\r\nclass App extends Component {\r\n    state = {\r\n        ApiResults : [], \r\n        Original : [],\r\n        Search : \"\"\r\n    }\r\n    componentDidMount(){\r\n        API.getUsers(\"\").then(res =>{\r\n            this.setState({\r\n                ApiResults : res.data.results, \r\n                Original : res.data.results\r\n            })\r\n        })\r\n    }\r\n\r\n handleChange = event =>{\r\n     const{ name, value} = event.target   \r\n    this.setState({\r\n        [name] : value\r\n    })\r\n    console.log(value)\r\n    let newResults = this.state.Original.filter(person =>{  //phillip - lip -1\r\n        return  person.name.first.toLowerCase().indexOf(value.toLowerCase())> -1\r\n    })\r\n\r\n    this.setState({\r\n        ApiResults : newResults\r\n    })\r\n }\r\n\r\n render(){\r\n     return(\r\n         <Container>\r\n            <Row>\r\n            <Col size =\"12\">\r\n            <Search  handleChange = {this.handleChange}  Search = {this.state.Search} />\r\n            {console.log(this.state.ApiResults)}\r\n            <Table ApiResults = {this.state.ApiResults}   />\r\n            </Col>\r\n            </Row>\r\n         </Container>\r\n     )\r\n }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}